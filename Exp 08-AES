print("Code By-Atharva Naik-K042")
import numpy as np

def display(mat, label):
    print(f"{label}:")
    for row in mat:
        print(" ".join(row))
    print()

def get_matrix_input(name):
    print(f"Enter the {name} matrix (4x4) as space-separated hex values:")
    matrix = []
    for _ in range(4):
        matrix.append(input().split())
    return np.array(matrix, dtype=object)

def substitute_bytes(state):
    s_box = [
        ["63", "7c", "77", "7b", "f2", "6b", "6f", "c5", "30", "01", "67", "2b", "fe", "d7", "ab", "76"],
        ["ca", "82", "c9", "7d", "fa", "59", "47", "f0", "ad", "d4", "a2", "af", "9c", "a4", "72", "c0"],
        ["b7", "fd", "93", "26", "36", "3f", "f7", "cc", "34", "a5", "e5", "f1", "71", "d8", "31", "15"],
        ["04", "c7", "23", "c3", "18", "96", "05", "9a", "07", "12", "80", "e2", "eb", "27", "b2", "75"],
        ["09", "83", "2c", "1a", "1b", "6e", "5a", "a0", "52", "3b", "d6", "b3", "29", "e3", "2f", "84"],
        ["53", "d1", "00", "ed", "20", "fc", "b1", "5b", "6a", "cb", "be", "39", "4a", "4c", "58", "cf"],
        ["d0", "ef", "aa", "fb", "43", "4d", "33", "85", "45", "f9", "02", "7f", "50", "3c", "9f", "a8"],
        ["51", "a3", "40", "8f", "92", "9d", "38", "f5", "bc", "b6", "da", "21", "10", "ff", "f3", "d2"],
        ["cd", "0c", "13", "ec", "5f", "97", "44", "17", "c4", "a7", "7e", "3d", "64", "5d", "19", "73"],
        ["60", "81", "4f", "dc", "22", "2a", "90", "88", "46", "ee", "b8", "14", "de", "5e", "0b", "db"],
        ["e0", "32", "3a", "0a", "49", "06", "24", "5c", "c2", "d3", "ac", "62", "91", "95", "e4", "79"],
        ["e7", "c8", "37", "6d", "8d", "d5", "4e", "a9", "6c", "56", "f4", "ea", "65", "7a", "ae", "08"],
        ["ba", "78", "25", "2e", "1c", "a6", "b4", "c6", "e8", "dd", "74", "1f", "4b", "bd", "8b", "8a"],
        ["70", "3e", "b5", "66", "48", "03", "f6", "0e", "61", "35", "57", "b9", "86", "c1", "1d", "9e"],
        ["e1", "f8", "98", "11", "69", "d9", "8e", "94", "9b", "1e", "87", "e9", "ce", "55", "28", "df"],
        ["8c", "a1", "89", "0d", "bf", "e6", "42", "68", "41", "99", "2d", "0f", "b0", "54", "bb", "16"]
    ]
    for i in range(4):
        for j in range(4):
            val = state[i, j]
            state[i, j] = s_box[int(val[0], 16)][int(val[1], 16)]

def shift_rows(state):
    state[1] = np.roll(state[1], -1)
    state[2] = np.roll(state[2], -2)
    state[3] = np.roll(state[3], -3)

def galois_multiply(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set:
            a ^= 0x1B
        b >>= 1
    return p & 0xFF

def mix_columns(state):
    mix_matrix = np.array([
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ])
    new_state = np.zeros((4, 4), dtype=object)
    for i in range(4):
        for j in range(4):
            new_val = 0
            for k in range(4):
                new_val ^= galois_multiply(int(state[k, j], 16), mix_matrix[i, k])
            new_state[i, j] = f"{new_val:02x}"
    return new_state

def add_round_key(state, round_key):
    return np.vectorize(lambda x, y: f"{int(x, 16) ^ int(y, 16):02x}")(state, round_key)

def main():
    plaintext = get_matrix_input("Plaintext")
    round_key = get_matrix_input("Round Key")
    state = plaintext.copy()
    
    display(state, "Initial State")
    substitute_bytes(state)
    display(state, "After SubBytes")
    shift_rows(state)
    display(state, "After ShiftRows")
    state = mix_columns(state)
    display(state, "After MixColumns")
    state = add_round_key(state, round_key)
    display(state, "After AddRoundKey")

if __name__ == "__main__":
    main()
